#!/bin/bash

instance="${1}"
action="${2}"
argumentA="${3}"
argumentB="${4}"

if [[ $instance == "help" || $instance == "" || $instance == "-h" ]]; then
    echo "Usage:"
    echo ""
    echo "${0##*/} {instance} start:···························Start the image and server."
    echo "${0##*/} {instance} stop:                            Stop the image and server."
    echo "${0##*/} {instance} restart:·························Perform a stop and a start."
    echo "${0##*/} {instance} enter [db|odoo]:                 Start an interactive shell in the server."
    echo "${0##*/} {instance} import <file> [target]:··········Copy file inside the server container."
    echo "${0##*/} {instance} export <file> [target]:          Copy file from the server container."
    echo "${0##*/} {instance} dump <db name> [folder]:·········Export odoo database dump file."
    echo "${0##*/} {instance} undump <file> [db name]:         Import odoo database dump file."
    echo "${0##*/} {instance} save_files [folder]:·············Export all files inside odoo instance to a backup."
    echo "${0##*/} {instance} load_files <file>:               Import a backup of all files inside an odoo instance and fix permissions."
    echo "${0##*/} {instance} regenerate [port]:···············CAREFUL. Erases current docker images and start again"
    echo "${0##*/} {instance} destroy:                         CAREFUL. Erases current docker image"
    echo "${0##*/} {instance} logs:····························Output docker containter logs to stdin"
    exit 0;
else
    # Enough is enough. Use "case" here!
    if [[ "${action}" == "start" ]]; then
        docker start odoo-$instance-db &&
        docker start odoo-$instance
    elif [[ "${action}" == "restart" ]]; then
        docker stop odoo-$instance-db && docker stop odoo-$instance;
        docker start odoo-$instance-db && docker start odoo-$instance;
    elif [[ "${action}" == "stop" ]]; then
        docker stop odoo-$instance &&
        docker stop odoo-$instance-db
    elif [[ "${action}" == "import" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker cp "$argumentA" odoo-$instance:"${argumentB-/root/.}"
        fi
    elif [[ "${action}" == "export" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker cp odoo-$instance:"$argumentA" "${argumentB-.}"
        fi
    elif [[ "${action}" == "undump" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            filename="${argumentA}"
            if [[ $argumentB == "" ]]; then
                database="$(echo "${argumentA}" | sed -E -e 's/_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}.dump$//')"
            else
                database="$argumentB"
            fi
            docker cp "$filename" odoo-$instance-db:"/home/postgres/${filename}"
            docker exec -u postgres -it odoo-$instance-db bash -c 'psql '"${database}"' < /home/postgres/'"${filename}" &&
            docker exec -u postgres -it odoo-$instance-db bash -c 'rm /home/postgres/'"$filename"
        fi
    elif [[ "${action}" == "dump" ]]; then
        timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
        filename="${argumentA}"'_'"${timestamp}"'.dump'
        if [[ $argumentB == "" ]]; then
            output_name="./$filename"
        else
            output_name="$argumentB/$filename"
        fi
        if [[ ! "$argumentA" == "" ]]; then
            docker exec -u postgres -it odoo-$instance-db bash -c 'pg_dump '"${argumentA}"' > /home/postgres/'"$filename" &&
            docker cp odoo-$instance-db:"/home/postgres/$filename" "$output_name" &&
            docker exec -u postgres -it odoo-$instance-db bash -c 'rm /home/postgres/'"$filename"
        fi
    elif [[ "${action}" == "save_files" ]]; then
        timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
        filename="${instance}"'_'"${timestamp}"'.tar.gz'
        if [[ $argumentA == "" ]]; then
            output_name="./$filename"
        else
            output_name="$argumentA/$filename"
        fi
        docker exec -u root -it odoo-$instance bash -c 'tar -zcpvf /root/'"$filename"' /var/lib/odoo/*' &&
        docker cp odoo-$instance:"/root/$filename" "$output_name" &&
        docker exec -u root -it odoo-$instance bash -c 'rm /root/'"$filename"
    elif [[ "${action}" == "load_files" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            filename="$argumentA"
            docker cp "$filename" odoo-$instance:"/var/lib/odoo/${filename}"
            docker exec -u root -it odoo-$instance bash -c 'cd /var/lib/odoo/ && tar -zxpvf '"$filename"' && chown -R odoo:odoo * && rm '"$filename"
        fi
    elif [[ "${action}" == "regenerate" ]]; then
        docker stop odoo-$instance;
        docker stop odoo-$instance-db;
        docker rm odoo-$instance-db;
        docker rm odoo-$instance;
        docker run --name odoo-$instance-db -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo postgres:9.4 &&
        docker exec -dit odoo-$instance-db bash -c 'mkdir /home/postgres && chown postgres:postgres /home/postgres' &&
        docker run --name odoo-$instance -t -p ${argumentA-8069}:8069 --link odoo-$instance-db:db --volume=${HOME}/workbench/odoo-$instance:/mnt/extra-addons -d odoo
    elif [[ "${action}" == "destroy" ]]; then
        docker stop odoo-$instance;
        docker stop odoo-$instance-db;
        docker rm odoo-$instance-db;
        docker rm odoo-$instance;
    elif [[ "${action}" == "enter" ]]; then
        if [[ $argumentA == "" ]]; then
            argument="odoo"
        else
            argument=${argumentA}
        fi
        if [[ "$argument" == "db" ]]; then
            docker exec -u root -it odoo-$instance-db sh -c "cd /home/postgres && bash"
        elif [[ "$argument" == "odoo" ]]; then
            docker exec -u root -it odoo-$instance sh -c "cd /usr/lib/python3/dist-packages/odoo && bash"
        else
            echo "Unknown argument: $argument"
            exit 1;
        fi
    elif [[ "${action}" == "logs" ]]; then
        watch -c 'docker logs odoo-'$instance' | tail'
    else
        echo "Unknown argument: ${action}"
        exit 1;
    fi
fi
