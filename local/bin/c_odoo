#!/bin/bash

instance="${1}"
action="${2}"
argumentA="${3}"
argumentB="${4}"

if [[ $instance == "help" || $instance == "" || $instance == "-h" ]]; then
    echo "Usage:"
    echo ""
    echo "${0##*/} {instance} start:···························Start the image and server."
    echo "${0##*/} {instance} stop:                            Stop the image and server."
    echo "${0##*/} {instance} restart:·························Perform a stop and a start."
    echo "${0##*/} {instance} enter:                           Start an interactive shell in the server."
    echo "${0##*/} {instance} import <file> [target]:··········Copy file inside the server container."
    echo "${0##*/} {instance} export <file> [target]:          Copy file from the server container."
    echo "${0##*/} {instance} save_files [folder]:·············Export all files inside odoo instance to a backup."
    echo "${0##*/} {instance} regenerate <db instance> [port]: CAREFUL. Erases current docker images and start again"
    echo "${0##*/} {instance} destroy:·························CAREFUL. Erases current docker image"
    echo "${0##*/} {instance} logs:                            Output docker containter logs to stdin"
    echo "${0##*/} {instance} odoo:····························Bridge to odoo binary, will act in main folder"
    exit 0;
else
    if [[ "${action}" == "start" ]]; then
        docker start odoo-$instance;
    elif [[ "${action}" == "restart" ]]; then
        docker stop odoo-$instance;
        docker start odoo-$instance;
    elif [[ "${action}" == "stop" ]]; then
        docker stop odoo-$instance;
    elif [[ "${action}" == "import" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            if [[ "$argumentB" == "" ]]; then
                argumentB="/root/."
            fi
            docker cp "$argumentA" odoo-$instance:"$argumentB"
        fi
    elif [[ "${action}" == "export" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker cp odoo-$instance:"$argumentA" "${argumentB-.}"
        fi
    elif [[ "${action}" == "save_files" ]]; then
        timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
        filename="${instance}"'_'"${timestamp}"'.tar.gz'
        if [[ $argumentA == "" ]]; then
            output_name="./$filename"
        else
            output_name="$argumentA/$filename"
        fi
        docker exec -u root odoo-$instance bash -c 'cd /var/lib/odoo && tar -zcpvf /root/'"$filename"' ./*' &&
        docker cp odoo-$instance:"/root/$filename" "$output_name" &&
        docker exec -u root odoo-$instance bash -c 'rm /root/'"$filename"
    elif [[ "${action}" == "regenerate" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker stop odoo-$instance;
            docker rm odoo-$instance;
            docker exec -u postgres -it postgres-$argumentA createuser "odoo-$instance"
            docker exec -u postgres -it postgres-$argumentA psql -c "alter user \"odoo-${instance}\" CREATEDB"
            # Odoo documentation explicitly says not to give superuser role to it's user,
            # but database restoration does not work without it. Until proper permissions are
            # found, we need this line.
            docker exec -u postgres -it postgres-$argumentA psql -c "alter user \"odoo-${instance}\" WITH SUPERUSER"
            # Once the issue is resolved, you may switch this line with the previous one to remove superuser privileges
            #docker exec -u postgres -it postgres-$argumentA psql -c "alter user \"odoo-${instance}\" WITH NOSUPERUSER"
            docker exec -u postgres -it postgres-$argumentA psql -c "alter user \"odoo-${instance}\" with encrypted password 'odoo-${instance}'"
            docker run -t -d\
                --name odoo-$instance\
                --net=postgres-network\
                -v ${HOME}/docker/odoo-$instance/extra-addons:/mnt/extra-addons\
                -v ${HOME}/docker/odoo-$instance/data:/var/lib/odoo\
                -e DB_PORT_5432_TCP_ADDR="postgres-$argumentA"\
                -e POSTGRES_PASSWORD=odoo-$instance\
                -e POSTGRES_USER=odoo-$instance\
                -p ${argumentB-8069}:8069\
                odoo
            docker exec -u root -it odoo-$instance bash -c "chown -R odoo:odoo /var/lib/odoo"
            docker exec -u root -it odoo-$instance bash -c "sed -i /etc/odoo/odoo.conf -e 's/^; db_maxconn = 64$/db_maxconn = 10/'"
        else
            echo "postgres db instance not specified."
            exit 1
        fi
    elif [[ "${action}" == "destroy" ]]; then
        docker stop odoo-$instance;
        docker rm odoo-$instance;
    elif [[ "${action}" == "enter" ]]; then
        docker exec -u root -it odoo-$instance sh -c "cd /usr/lib/python3/dist-packages/odoo && bash"
    elif [[ "${action}" == "logs" ]]; then
        docker logs -f odoo-"$instance"
    elif [[ "${action}" == "odoo" ]]; then
        argument="$( echo "$*" | sed -E -e 's/^'"$instance"' //' )"
        docker exec -u root -it odoo-$instance bash -c "cd /mnt/extra-addons && /usr/bin/$argument"
    else
        echo "Unknown argument: ${action}"
        exit 1;
    fi
fi
