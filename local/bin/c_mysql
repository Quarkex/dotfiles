#!/bin/bash

instance="${1}"
action="${2}"
argumentA="${3}"
argumentB="${4}"
argumentC="${5}"

if [[ $instance == "help" || $instance == "" || $instance == "-h" ]]; then
    echo "Usage:"
    echo ""
    echo "${0##*/} {instance} start:···························Start the image and server."
    echo "${0##*/} {instance} stop:                            Stop the image and server."
    echo "${0##*/} {instance} restart:····························Perform a stop and a start."
    echo "${0##*/} {instance} enter:                              Start an interactive shell in the server."
    echo "${0##*/} {instance} import <file> [target]:·············Copy file inside the server container."
    echo "${0##*/} {instance} export <file> [target]:             Copy file from the server container."
    echo "${0##*/} {instance} dump <db name> [folder]:············Export database dump file."
    echo "${0##*/} {instance} undump <instance> <file> [db name]: Import database dump file."
    echo "${0##*/} {instance} regenerate [port]:··················CAREFUL. Erases current docker images and start again"
    echo "${0##*/} {instance} destroy:                            CAREFUL. Erases current docker image"
    echo "${0##*/} {instance} adduser <user>:·····················Adds an user to the database"
    echo "${0##*/} {instance} passwd <user> <password>:           Changes user password"
    echo "${0##*/} {instance} logs:·······························Output docker containter logs to stdin"
    echo "${0##*/} {instance} mysql-eval:                         Evaluate a mysql expression."
    exit 0;
else
    if [[ "${action}" == "start" ]]; then
        docker start mysql-$instance
    elif [[ "${action}" == "restart" ]]; then
        docker stop mysql-$instance
        docker start mysql-$instance
    elif [[ "${action}" == "stop" ]]; then
        docker stop mysql-$instance
    elif [[ "${action}" == "import" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            if [[ "$argumentB" == "" ]]; then
                argumentB="/home/mysql/."
            fi
            docker cp "$argumentA" mysql-$instance:"$argumentB"
        fi
    elif [[ "${action}" == "export" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker cp mysql-$instance:"$argumentA" "${argumentB-.}"
        fi
    elif [[ "${action}" == "undump" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            if [[ ! "$argumentB" == "" ]]; then
                wordpress_instance="${argumentA}"
                filename="${argumentB}"
                if [[ $argumentC == "" ]]; then
                    database="$(echo "$filename" | sed -E -e 's/\.sql$//' -e 's/_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}$//')"
                else
                    database="$argumentC"
                fi
                docker cp "$filename" mysql-$instance:"/home/mysql/${filename}"
                docker exec -u mysql -it mysql-$instance \
                    mysql -uroot -p"mysql" -e 'DROP DATABASE "'"${database}"'";'
                docker exec -u mysql -it mysql-$instance \
                    mysqladmin -u root -p"mysql" create "${database}"
                docker exec -u mysql -it mysql-$instance \
                    mysql -uroot -p"mysql" -e "GRANT ALL PRIVILEGES ON '${database}'.* TO 'wordpress-${wordpress_instance}'@'localhost' IDENTIFIED BY 'wordpress-${wordpress_instance}';"
                docker exec -u mysql -it mysql-$instance bash -c \
                    'mysql -uroot -p"mysql" '"$database"'</home/mysql/'"${filename}" &&
                docker exec -u mysql -it mysql-$instance \
                    rm -f /home/mysql/"$filename"
            fi
        fi
    elif [[ "${action}" == "dump" ]]; then
        timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
        filename="${argumentA}"'_'"${timestamp}"'.sql'
        if [[ $argumentB == "" ]]; then
            output_name="./$filename"
        else
            output_name="$argumentB/$filename"
        fi
        if [[ ! "$argumentA" == "" ]]; then
            docker exec -u mysql mysql-$instance bash -c 'exec mysqldump -uroot -p"mysql" '"${argumentA}"' >/home/mysql/'"$filename" &&
            docker cp mysql-$instance:"/home/mysql/$filename" "$output_name" &&
            docker exec -u mysql mysql-$instance bash -c 'rm /home/mysql/'"$filename"
        fi
    elif [[ "${action}" == "regenerate" ]]; then
        docker stop mysql-$instance;
        docker rm mysql-$instance;
        docker network create --driver bridge mysql-network;
        docker run -d\
            --name mysql-$instance\
            --restart unless-stopped\
            --net=mysql-network\
            --volume=${HOME}/docker/mysql-$instance:/var/lib/mysql\
            -e MYSQL_ROOT_PASSWORD=mysql\
            mysql &&
        docker exec -dit mysql-$instance bash -c 'mkdir /home/mysql && chown mysql:mysql /home/mysql'
    elif [[ "${action}" == "destroy" ]]; then
        docker stop mysql-$instance;
        docker rm mysql-$instance;
    elif [[ "${action}" == "enter" ]]; then
        docker exec -u mysql -it mysql-$instance sh -c "cd /home/mysql && bash"
    elif [[ "${action}" == "adduser" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker exec -u mysql -it mysql-$instance mysql -uroot -p"mysql" -e "CREATE USER '${argumentA}'@'localhost';"
        else
            echo "no user specified."
            exit 1
        fi
    elif [[ "${action}" == "passwd" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            if [[ ! "$argumentB" == "" ]]; then
                docker exec -u mysql -it mysql-$instance mysql -uroot -p"mysql" -e "ALTER USER '${argumentA}'@'localhost' IDENTIFIED BY '${argumentB}';"
            else
                echo "no password specified."
                exit 1
            fi
        else
            echo "no user specified."
            exit 1
        fi
    elif [[ "${action}" == "logs" ]]; then
        docker logs -f mysql-"$instance"
    elif [[ "${action}" == "mysql-eval" ]]; then
        argument="$( echo "$*" | sed -E -e 's/^'"$instance"' //' )"
        docker exec -u mysql -it mysql-$instance mysql -uroot -p"mysql" -e "${argument##mysql-eval }"
    else
        echo "Unknown argument: ${action}"
        exit 1;
    fi
fi
