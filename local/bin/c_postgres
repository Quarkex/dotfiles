#!/bin/bash

instance="${1}"
action="${2}"
argumentA="${3}"
argumentB="${4}"

if [[ $instance == "help" || $instance == "" || $instance == "-h" ]]; then
    echo "Usage:"
    echo ""
    echo "${0##*/} {instance} start:···························Start the image and server."
    echo "${0##*/} {instance} stop:                            Stop the image and server."
    echo "${0##*/} {instance} restart:·························Perform a stop and a start."
    echo "${0##*/} {instance} enter:                           Start an interactive shell in the server."
    echo "${0##*/} {instance} import <file> [target]:··········Copy file inside the server container."
    echo "${0##*/} {instance} export <file> [target]:          Copy file from the server container."
    echo "${0##*/} {instance} dump <db name> [folder]:·········Export database dump file."
    echo "${0##*/} {instance} undump <file> [db name]:         Import database dump file."
    echo "${0##*/} {instance} regenerate [port]:···············CAREFUL. Erases current docker images and start again"
    echo "${0##*/} {instance} destroy:                         CAREFUL. Erases current docker image"
    echo "${0##*/} {instance} logs:····························Output docker containter logs to stdin"
    echo "${0##*/} {instance} psql:                            Bridge to psql binary, will act in main folder"
    exit 0;
else
    if [[ "${action}" == "start" ]]; then
        docker start postgres-$instance
    elif [[ "${action}" == "restart" ]]; then
        docker stop postgres-$instance
        docker start postgres-$instance
    elif [[ "${action}" == "stop" ]]; then
        docker stop postgres-$instance
    elif [[ "${action}" == "import" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            if [[ "$argumentB" == "" ]]; then
                argumentB="/root/."
            fi
            docker cp "$argumentA" postgres-$instance:"$argumentB"
        fi
    elif [[ "${action}" == "export" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            docker cp postgres-$instance:"$argumentA" "${argumentB-.}"
        fi
    elif [[ "${action}" == "undump" ]]; then
        if [[ ! "$argumentA" == "" ]]; then
            filename="${argumentA}"
            if [[ $argumentB == "" ]]; then
                database="$(echo "${argumentA}" | sed -E -e 's/_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}.dump$//')"
            else
                database="$argumentB"
            fi
            docker cp "$filename" postgres-$instance:"/home/postgres/${filename}"
            docker exec -u postgres -it postgres-$instance bash -c \
                'createdb -O postgres '"${database}"'; psql '"${database}"' < /home/postgres/'"${filename}" &&
            docker exec -u postgres -it postgres-$instance bash -c 'rm -f /home/postgres/'"$filename"
        fi
    elif [[ "${action}" == "dump" ]]; then
        timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
        filename="${argumentA}"'_'"${timestamp}"'.dump'
        if [[ $argumentB == "" ]]; then
            output_name="./$filename"
        else
            output_name="$argumentB/$filename"
        fi
        if [[ ! "$argumentA" == "" ]]; then
            docker exec -u postgres -it postgres-$instance bash -c 'pg_dump '"${argumentA}"' > /home/postgres/'"$filename" &&
            docker cp postgres-$instance:"/home/postgres/$filename" "$output_name" &&
            docker exec -u postgres -it postgres-$instance bash -c 'rm /home/postgres/'"$filename"
        fi
    elif [[ "${action}" == "regenerate" ]]; then
        docker stop postgres-$instance;
        docker rm postgres-$instance;
        #docker run --name postgres-$instance -p ${argumentA-5432}:5432 --user "$(id -u):$(id -g)" --volume=${HOME}/docker/postgres-$instance:/var/lib/postgresql -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres postgres:9.4 &&
        docker run --name postgres-$instance -p ${argumentA-5432}:5432 -e USERID=$UID -e USER=$USER --volume=${HOME}/docker/postgres-$instance:/var/lib/postgresql/data -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres postgres:9.4 &&
        docker exec -dit postgres-$instance bash -c 'mkdir /home/postgres && chown postgres:postgres /home/postgres'
    elif [[ "${action}" == "destroy" ]]; then
        docker stop postgres-$instance;
        docker rm postgres-$instance;
    elif [[ "${action}" == "enter" ]]; then
        docker exec -u postgres -it postgres-$instance sh -c "cd /home/postgres && bash"
    elif [[ "${action}" == "logs" ]]; then
        watch -c 'docker logs postgres-'$instance' | tail'
    elif [[ "${action}" == "psql" ]]; then
        argument="$( echo "$*" | sed -E -e 's/^'"$instance"' //' )"
        docker exec -u postgres -it postgres-$instance bash -c "cd /mnt && /usr/bin/$argument"
    else
        echo "Unknown argument: ${action}"
        exit 1;
    fi
fi
